{"ast":null,"code":"var _jsxFileName = \"F:\\\\codeGeek\\\\App.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useRef, createRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nvar fields = ['firstname', 'lastname', 'email', 'mobileno'];\nexport default function App() {\n  var _this = this;\n\n  var valuee = useState(new Animated.ValueXY({\n    x: 200,\n    y: 500\n  }))[0];\n  var ViewRefs = React.useRef([]);\n  var i = 0;\n\n  while (i <= fields.length) {\n    if (i == 0) {\n      ViewRefs.current.push(new Animated.Value(1));\n      ViewRefs.current[(i + 1) * 858] = new Animated.ValueXY({\n        x: 200,\n        y: 500\n      });\n    } else {\n      ViewRefs.current.push(new Animated.Value(0));\n      ViewRefs.current[(i + 1) * 858] = new Animated.ValueXY({\n        x: 200,\n        y: 500\n      });\n    }\n\n    i++;\n  }\n\n  console.log(ViewRefs);\n  var fade = useRef(new Animated.Value(0)).current;\n\n  function moveText(index) {\n    console.log(fade);\n    console.log(ViewRefs.current[(index + 1) * 858]);\n    Animated.timing(ViewRefs.current[index], {\n      toValue: 0,\n      duration: 3000,\n      useNativeDriver: false\n    }).start();\n  }\n\n  return React.createElement(Animated.View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, fields.map(function (a, index) {\n    return React.createElement(TouchableOpacity, {\n      key: index,\n      onPress: function onPress() {\n        return moveText(index);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, React.createElement(Animated.Text, {\n      style: {\n        opacity: ViewRefs.current[index]\n      },\n      ref: ViewRefs.current[index],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, a));\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    textAlign: \"center\",\n    height: \"100%\",\n    textAlignVertical: \"middle\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["F:/codeGeek/App.js"],"names":["StatusBar","React","useState","useRef","createRef","fields","App","valuee","Animated","ValueXY","x","y","ViewRefs","i","length","current","push","Value","console","log","fade","moveText","index","timing","toValue","duration","useNativeDriver","start","styles","container","map","a","opacity","StyleSheet","create","textAlign","height","textAlignVertical","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React,{useState,useRef, createRef} from 'react';\nimport { StyleSheet, Text, View,Animated,TouchableOpacity } from 'react-native';\nconst fields = ['firstname', 'lastname', 'email', 'mobileno'];\nexport default function App() {\n  //const value = useRef(new Animated.ValueXY({ x: 200, y: 500 })).current;\n  const valuee = useState(new Animated.ValueXY({ x: 200, y: 500 }))[0];\n  const ViewRefs = React.useRef([]);\n  //ViewRefs.current=[];\n  // if (ViewRefs.current.length != fields.length) {\n  //   ViewRefs.current = fields.map((_, i) =>createRef(new Animated.Value(0)))\n    \n  // }\n  var i = 0;\n  while (i <= fields.length) {\n    if (i == 0) {\n      ViewRefs.current.push(new Animated.Value(1))\n      ViewRefs.current[(i+1)*858]=(new Animated.ValueXY({ x: 200, y: 500 }))\n    } else {\n      ViewRefs.current.push(new Animated.Value(0))\n      ViewRefs.current[(i+1)*858]=(new Animated.ValueXY({ x: 200, y: 500 }))\n    }\n    i++;\n  }\n\n  console.log(ViewRefs)\n  \n  const fade = useRef(new Animated.Value(0)).current;\n  function moveText(index) {\n    console.log(fade)\n    console.log(ViewRefs.current[(index+1)*858])\n    //  Animated.timing(ViewRefs.current[(index+1)*858], {\n    //   toValue: { x: 200, y: 500 },\n    //   duration: 2000,\n    //   useNativeDriver: false\n    // }).start()\n    Animated.timing(ViewRefs.current[index], {\n      toValue: 0,\n      duration: 3000,\n      useNativeDriver: false\n    }).start()\n   \n  }\n  // function moveText() {\n  //   const y = value.y\n  //   console.log(y)\n  //   if (value.y==150) {\n  //     console.log(value.y)\n  //     Animated.timing(fade, {\n  //       toValue: 0,\n  //       duration: 1000,\n  //       useNativeDriver: false\n  //     }).start()\n  //     Animated.timing(value, {\n  //       toValue: { x: 200, y: 500 },\n  //       duration: 2000,\n  //       useNativeDriver: false\n  //     }).start()\n    \n  //   } else {\n  //     Animated.timing(value, {\n  //       toValue: { x: 200, y: 150 },\n  //       duration: 1000,\n  //       useNativeDriver: false\n  //     }).start()\n  //     Animated.timing(fade, {\n  //       toValue: 1,\n  //       duration: 2000,\n  //       useNativeDriver: false\n  //     }).start()\n  //   }\n  // }\n  return (\n    // <View style={styles.container}>\n    //   <Animated.View >\n     \n    //     {fields.map((el, i) => (\n    //     <View key={i}>\n    //      <TouchableOpacity onPress={moveText}>\n    //     <Text ref={ViewRefs.current[i]} style={{opacity:ViewRefs.current[i]}}>{el}</Text>\n    //         </TouchableOpacity>\n    //         </View>\n    //   ))}\n          \n    //     </Animated.View>\n      \n    // </View>\n \n    <Animated.View style={styles.container}>\n      {\n        fields.map((a, index) => (\n          < TouchableOpacity  key={index}  onPress={() => moveText(index)} >\n            <Animated.Text style={{ opacity: ViewRefs.current[index] }} ref={ViewRefs.current[index]}>{a}</Animated.Text>\n          </TouchableOpacity>\n \n  ))\n      }\n         </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    textAlign: \"center\",\n    height: \"100%\",\n    textAlignVertical:\"middle\",\n    justifyContent:\"center\"\n  },\n});\n"]},"metadata":{},"sourceType":"module"}