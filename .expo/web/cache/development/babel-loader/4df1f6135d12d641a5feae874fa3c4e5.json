{"ast":null,"code":"var _jsxFileName = \"F:\\\\codeGeek\\\\App.js\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useState, useRef, createRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nvar fields = ['firstname', 'lastname', 'email', 'mobileno'];\nexport default function App() {\n  var _this = this;\n\n  var valuee = useState(new Animated.ValueXY({\n    x: 200,\n    y: 500\n  }))[0];\n  var ViewRefs = React.useRef([]);\n\n  while (ViewRefs.current.length < fields.length) {\n    ViewRefs.current.push(new Animated.Value(1));\n  }\n\n  console.log(ViewRefs.current);\n  var fade = useRef(new Animated.Value(0)).current;\n\n  function moveText(index) {\n    console.log(index);\n    Animated.timing(ViewRefs.current[index], {\n      toValue: 0,\n      duration: 1000,\n      useNativeDriver: false\n    }).start();\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, fields.map(function (a, index) {\n    return React.createElement(Text, {\n      key: index,\n      onPress: moveText(index),\n      style: {\n        opacity: ViewRefs.current[index]._value\n      },\n      ref: ViewRefs.current[index],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 34\n      }\n    }, a);\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    textAlign: \"center\",\n    height: \"100%\",\n    textAlignVertical: \"middle\",\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["F:/codeGeek/App.js"],"names":["StatusBar","React","useState","useRef","createRef","fields","App","valuee","Animated","ValueXY","x","y","ViewRefs","current","length","push","Value","console","log","fade","moveText","index","timing","toValue","duration","useNativeDriver","start","styles","container","map","a","opacity","_value","StyleSheet","create","textAlign","height","textAlignVertical","justifyContent"],"mappings":";AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAcC,QAAd,EAAuBC,MAAvB,EAA+BC,SAA/B,QAA+C,OAA/C;;;;;;AAEA,IAAMC,MAAM,GAAG,CAAC,WAAD,EAAc,UAAd,EAA0B,OAA1B,EAAmC,UAAnC,CAAf;AACA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAE5B,MAAMC,MAAM,GAAGL,QAAQ,CAAC,IAAIM,QAAQ,CAACC,OAAb,CAAqB;AAAEC,IAAAA,CAAC,EAAE,GAAL;AAAUC,IAAAA,CAAC,EAAE;AAAb,GAArB,CAAD,CAAR,CAAmD,CAAnD,CAAf;AACA,MAAMC,QAAQ,GAAGX,KAAK,CAACE,MAAN,CAAa,EAAb,CAAjB;;AAOA,SAAOS,QAAQ,CAACC,OAAT,CAAiBC,MAAjB,GAA0BT,MAAM,CAACS,MAAxC,EAAgD;AAE9CF,IAAAA,QAAQ,CAACC,OAAT,CAAiBE,IAAjB,CAAsB,IAAIP,QAAQ,CAACQ,KAAb,CAAmB,CAAnB,CAAtB;AACD;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAACC,OAArB;AAGD,MAAMM,IAAI,GAAGhB,MAAM,CAAC,IAAIK,QAAQ,CAACQ,KAAb,CAAmB,CAAnB,CAAD,CAAN,CAA8BH,OAA3C;;AACA,WAASO,QAAT,CAAkBC,KAAlB,EAAyB;AACvBJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACIb,IAAAA,QAAQ,CAACc,MAAT,CAAgBV,QAAQ,CAACC,OAAT,CAAiBQ,KAAjB,CAAhB,EAAyC;AACzCE,MAAAA,OAAO,EAAE,CADgC;AAEzCC,MAAAA,QAAQ,EAAE,IAF+B;AAGzCC,MAAAA,eAAe,EAAE;AAHwB,KAAzC,EAICC,KAJD;AAUP;;AA8BC,SAgBE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIvB,MAAM,CAACwB,GAAP,CAAW,UAACC,CAAD,EAAGT,KAAH;AAAA,WAAc,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEA,KAAX;AAAkB,MAAA,OAAO,EAAED,QAAQ,CAACC,KAAD,CAAnC;AAA4C,MAAA,KAAK,EAAE;AAACU,QAAAA,OAAO,EAACnB,QAAQ,CAACC,OAAT,CAAiBQ,KAAjB,EAAwBW;AAAjC,OAAnD;AAA6F,MAAA,GAAG,EAAEpB,QAAQ,CAACC,OAAT,CAAiBQ,KAAjB,CAAlG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4HS,CAA5H,CAAd;AAAA,GAAX,CAFJ,CAhBF;AAsBD;AAED,IAAMH,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BN,EAAAA,SAAS,EAAE;AACTO,IAAAA,SAAS,EAAE,QADF;AAETC,IAAAA,MAAM,EAAE,MAFC;AAGTC,IAAAA,iBAAiB,EAAC,QAHT;AAITC,IAAAA,cAAc,EAAC;AAJN;AADoB,CAAlB,CAAf","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React,{useState,useRef, createRef} from 'react';\nimport { StyleSheet, Text, View,Animated,TouchableOpacity } from 'react-native';\nconst fields = ['firstname', 'lastname', 'email', 'mobileno'];\nexport default function App() {\n  //const value = useRef(new Animated.ValueXY({ x: 200, y: 500 })).current;\n  const valuee = useState(new Animated.ValueXY({ x: 200, y: 500 }))[0];\n  const ViewRefs = React.useRef([]);\n  //ViewRefs.current=[];\n  // if (ViewRefs.current.length != fields.length) {\n  //   ViewRefs.current = fields.map((_, i) =>createRef(new Animated.Value(0)))\n    \n  // }\n\n  while (ViewRefs.current.length < fields.length) {\n    \n    ViewRefs.current.push(new Animated.Value(1))\n  }\n   console.log(ViewRefs.current)\n  \n  \n  const fade = useRef(new Animated.Value(0)).current;\n  function moveText(index) {\n    console.log(index)\n        Animated.timing(ViewRefs.current[index], {\n        toValue: 0,\n        duration: 1000,\n        useNativeDriver: false\n      }).start()\n      // Animated.timing(value, {\n      //   toValue: { x: 200, y: 500 },\n      //   duration: 2000,\n      //   useNativeDriver: false\n      // }).start()\n}\n  // function moveText() {\n  //   const y = value.y\n  //   console.log(y)\n  //   if (value.y==150) {\n  //     console.log(value.y)\n  //     Animated.timing(fade, {\n  //       toValue: 0,\n  //       duration: 1000,\n  //       useNativeDriver: false\n  //     }).start()\n  //     Animated.timing(value, {\n  //       toValue: { x: 200, y: 500 },\n  //       duration: 2000,\n  //       useNativeDriver: false\n  //     }).start()\n    \n  //   } else {\n  //     Animated.timing(value, {\n  //       toValue: { x: 200, y: 150 },\n  //       duration: 1000,\n  //       useNativeDriver: false\n  //     }).start()\n  //     Animated.timing(fade, {\n  //       toValue: 1,\n  //       duration: 2000,\n  //       useNativeDriver: false\n  //     }).start()\n  //   }\n  // }\n  return (\n    // <View style={styles.container}>\n    //   <Animated.View >\n     \n    //     {fields.map((el, i) => (\n    //     <View key={i}>\n    //      <TouchableOpacity onPress={moveText}>\n    //     <Text ref={ViewRefs.current[i]} style={{opacity:ViewRefs.current[i]}}>{el}</Text>\n    //         </TouchableOpacity>\n    //         </View>\n    //   ))}\n          \n    //     </Animated.View>\n      \n    // </View>\n \n    <View style={styles.container}> \n       {\n        fields.map((a,index) => (<Text key={index} onPress={moveText(index)} style={{opacity:ViewRefs.current[index]._value}} ref={ViewRefs.current[index]}>{a}</Text>))}\n    </View>\n\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    textAlign: \"center\",\n    height: \"100%\",\n    textAlignVertical:\"middle\",\n    justifyContent:\"center\"\n  },\n});\n"]},"metadata":{},"sourceType":"module"}